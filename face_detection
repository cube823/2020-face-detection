import os  # 운영체제와 상호작용을 통한 경로 가져오기
import dlib  # dlib.get_frontal_face_detector(), dlib.shape_predictor(), dlib.load_rgb_image() 사용
import glob  # glob.glob <- 사용자가 제시한 조건에 맞는 파일명을 리스트 형식으로 리턴
import cv2  # opencv
import numpy as np

# parameter 값으로 자신의 이미지 파일을 저장해 놓은 경로를 입력한다.
def facing_67(face_folder_path):
    
    predictor_path = "../testing/shape-predictor"
    faces_folder_path = face_folder_path

    detector = dlib.get_frontal_face_detector()
    predictor = dlib.shape_predictor(predictor_path)
    
    n = 1  # 이미지 번호 증가
    cnt = 0  # 제대로 저장된 이미지 수
    no_dets = 0  # 데이터를 찾지 못한 이미지 수
    minus_value = 0  # 데이터는 있지만 음수가 들어가 있는 이미지 수
    for f in glob.glob(os.path.join(faces_folder_path, "*.jpg")): 
        img = dlib.load_rgb_image(f)  # directory 에 있는 이미지 파일 하나씩 불러오기
        # print(f)  # 경로 확인
        
        r, g, b = cv2.split(img)  # bgr을 rgb 로변경
        cvImg = cv2.merge([b,g,r])
        
        # 이미지를 두배로 키운다.
        cvImg = cv2.resize(cvImg, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
        
        dets = detector(cvImg, 1)  # face detecting function. 이 결과로 rectangle[] value return
        if len(dets) == 1:  # rectangle[] 에 값이 하나인 경우. 
            
            minus_detector = int(str(dets[0]).replace('[', '').replace(']', '').replace('(', '').replace(')', '').\
                     replace(',', '').replace(' ', '').replace('-', '111111'))  # rectangle() value에 음수가 있는 경우 거르기 위한 과정
  
            # minus_detector 를 만든 이유는 위에서 dets 가 있는 경우를 걸러도 rectangle() value에 음수가 되는 값이 존재할 수 있기 때문이다.
            # 만일 rectangle() value가 음수가 되면 47번째 'crop = ~' 라인에서 Assertion: _!is_empty() 에러를 반환하는 경우가 발생한다.
            # 구글에서 90개의 이미지를 크롤링한 결과 1장의 rectangle() value가 음수가 되었고 이를 거르는 과정을 설정하였다.
            
            if minus_detector < 10_000_000_000:  # 위 과정에서 음수가 최소 11자리 되도록 설정 -> xx가 양수이면 100억 미만
                for _, d in enumerate(dets):
                    print(d)
                    shape = predictor(img, d)

                    for i in range(0, shape.num_parts):
                        x = shape.part(i).x
                        y = shape.part(i).y

                        cv2.putText(cvImg, str(i), (x, y), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 0.3, (0, 255, 0))                    
                        crop = cvImg[d.top():d.bottom(), d.left():d.right()]
                        
                    cv2.imwrite(f'rich{n}.jpg', crop)
                    cnt += 1
                n += 1
            else:
                minus_value += 1
        else:
            no_dets += 1
    
    # 2020. 06. 19. 기준으로 출력한
    # 상위 부자 10명, 각각 9장을 기준으로 correct_return: 75, no_dets: 14, minus_value:1
    # 이미지 크롤링을 진행한 날짜와 시간에 따라 값은 상이할 수 있다.
    
    # print(f'correct_return: {cnt}')  
    # print(f'no_dets: {no_dets}')
    # print(f'minus_value: {minus_value}')
            
# 함수 실행한 결과. 사진은 파라미터에 입력한 경로로 들어가 확인
facing_67("../testing/images/")
